"""
–ú–æ–¥—É–ª—å –∏–≥—Ä–æ–∫–∞ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥
"""

class Player:
    """–ö–ª–∞—Å—Å –∏–≥—Ä–æ–∫–∞ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ"""
    
    def __init__(self, start_x, start_y):
        self.x = start_x
        self.y = start_y
        self.start_x = start_x
        self.start_y = start_y
        self.moves_count = 0
        self.move_history = []
    
    def reset_position(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é"""
        self.x = self.start_x
        self.y = self.start_y
        self.moves_count = 0
        self.move_history.clear()
    
    def set_start_position(self, x, y):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é"""
        self.start_x = x
        self.start_y = y
        self.reset_position()
    
    def move_to(self, new_x, new_y):
        """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é"""
        old_pos = (self.x, self.y)
        self.x = new_x
        self.y = new_y
        self.moves_count += 1
        self.move_history.append((old_pos, (new_x, new_y)))
    
    def get_position(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é"""
        return (self.x, self.y)
    
    def get_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞"""
        return {
            'position': (self.x, self.y),
            'moves': self.moves_count,
            'start': (self.start_x, self.start_y)
        }
    
    def is_at_finish(self, finish_pos: tuple):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        return finish_pos == (self.x, self.y)



class CommandInterpreter:
    """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–º"""
    
    def __init__(self, player, maze):
        self.player = player
        self.maze = maze
        self.execution_log = []
        self.error_log = []
    
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        self.execution_log.clear()
        self.error_log.clear()
    
    def log_move(self, command, success, message=""):
        """–ó–∞–ø–∏—Å–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        self.execution_log.append({
            'command': command,
            'success': success,
            'message': message,
            'position': self.player.get_position()
        })
    
    def move_up(self):
        """–î–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö"""
        new_x, new_y = self.player.x, self.player.y - 1
        if self.maze.is_valid_move(new_x, new_y):
            self.player.move_to(new_x, new_y)
            self.log_move("move_up()", True, f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ ({new_x}, {new_y})")
            return True
        else:
            self.log_move("move_up()", False, "–ù–µ–ª—å–∑—è –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–≤–µ—Ä—Ö - —Å—Ç–µ–Ω–∞!")
            return False
    
    def move_down(self):
        """–î–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑"""
        new_x, new_y = self.player.x, self.player.y + 1
        if self.maze.is_valid_move(new_x, new_y):
            self.player.move_to(new_x, new_y)
            self.log_move("move_down()", True, f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ ({new_x}, {new_y})")
            return True
        else:
            self.log_move("move_down()", False, "–ù–µ–ª—å–∑—è –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–Ω–∏–∑ - —Å—Ç–µ–Ω–∞!")
            return False
    
    def move_left(self):
        """–î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ"""
        new_x, new_y = self.player.x - 1, self.player.y
        if self.maze.is_valid_move(new_x, new_y):
            self.player.move_to(new_x, new_y)
            self.log_move("move_left()", True, f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ ({new_x}, {new_y})")
            return True
        else:
            self.log_move("move_left()", False, "–ù–µ–ª—å–∑—è –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ª–µ–≤–æ - —Å—Ç–µ–Ω–∞!")
            return False
    
    def move_right(self):
        """–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ"""
        new_x, new_y = self.player.x + 1, self.player.y
        if self.maze.is_valid_move(new_x, new_y):
            self.player.move_to(new_x, new_y)
            self.log_move("move_right()", True, f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ ({new_x}, {new_y})")
            return True
        else:
            self.log_move("move_right()", False, "–ù–µ–ª—å–∑—è –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø—Ä–∞–≤–æ - —Å—Ç–µ–Ω–∞!")
            return False
    
    def get_position(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞"""
        return self.player.get_position()
    
    def is_at_finish(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞ —Ñ–∏–Ω–∏—à–µ"""
        x, y = self.player.get_position()
        return self.maze.is_finish(x, y)
    
    def execute_code(self, code):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.clear_logs()
        
        try:
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            safe_globals = {
                'move_up': self.move_up,
                'move_down': self.move_down,
                'move_left': self.move_left,
                'move_right': self.move_right,
                'get_position': self.get_position,
                'is_at_finish': self.is_at_finish,
                '__builtins__': {
                    'range': range,
                    'len': len,
                    'print': print,
                    'for': 'for',  # –†–∞–∑—Ä–µ—à–∞–µ–º —Ü–∏–∫–ª—ã
                    'if': 'if',    # –†–∞–∑—Ä–µ—à–∞–µ–º —É—Å–ª–æ–≤–∏—è
                    'while': 'while'
                }
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥
            exec(code, safe_globals)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
            if self.is_at_finish():
                self.log_move("FINISH", True, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ñ–∏–Ω–∏—à–∞!")
            
            return True, self.get_execution_summary()
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"
            self.error_log.append(error_msg)
            return False, error_msg
    
    def get_execution_summary(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if not self.execution_log:
            return "–ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –∫–æ–º–∞–Ω–¥—ã –¥–≤–∏–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        summary = []
        summary.append(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {len(self.execution_log)}")
        summary.append(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤: {self.player.moves_count}")
        summary.append(f"–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {self.player.get_position()}")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥
        recent_commands = self.execution_log[-5:]
        summary.append("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
        for cmd in recent_commands:
            status = "‚úì" if cmd['success'] else "‚úó"
            summary.append(f"{status} {cmd['command']}: {cmd['message']}")
        
        return "\n".join(summary)
